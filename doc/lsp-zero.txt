==============================================================================
*lsp-zero*

A starting point to setup some lsp related features in neovim.

==============================================================================
Introduction                                                  *lsp-zero-intro*

The purpose of this plugin is to bundle all the "boilerplate code" needed
to get |nvim-cmp| (a popular completion engine) and the native |LSP| client to
work together nicely. Additionally, with the help of |mason.nvim|,
it can let you install language servers from inside neovim.

==============================================================================
Quickstart                                               *lsp-zero-quickstart*

The fastest way to get started is by using a "preset" and immediately call
the |lsp-zero.setup()| function.

>
    local lsp = require('lsp-zero')
    lsp.preset('recommended')
    lsp.setup()
<

If your config file is written in vimscript use |lua-heredoc|.

>
    lua <<EOF
    local lsp = require('lsp-zero')

    lsp.preset('recommended')
    lsp.setup()
    EOF
<


==============================================================================
Presets                                                     *lsp-zero-presets*

Presets are a combinations of options that determine how |lsp-zero.setup()|
will behave, they can enable or disable features.

They are created when you use the function |lsp-zero.preset()|.

>
  local lsp = require('lsp-zero')
  lsp.preset('recommended')
>

These are the available presets.

  recommended: ~
     * Setup every language server installed with |mason.nvim|
       at startup.

     * Suggest to install a language server when you encounter a new filetype.

     * Setup `nvim-cmp` with some default completion sources, this includes
       support for LSP based completion.

     * Setup some default keybindings for `nvim-cmp`.

     * Show diagnostic info with "nice" icons.

     * Diagnostic messages are shown in a floating window.

     * Setup some keybindings related to LSP actions, things like go to
       definition or rename variable.

  lsp-compe: ~
      Is the same as the `recommended` except that it assumes you want full
      control over the configuration for `nvim-cmp`. It'll provide the
      `capabilities` config to the languages server but the rest of the
      config is controlled by the user.

  lsp-only: ~
      Is the same as the `recommended` without any support for `nvim-cmp`.

  manual-setup: ~
      Is the same as `recommended`, but without automatic setup for language
      servers. Suggestions for language server will be disabled.The user
      will need to call the functions |lsp-zero.setup_servers()| or
      |lsp-zero.configure()| in order to initialize the language servers.
      See |lsp-zero-lua-api| for more details of these functions.

  per-project: ~
      Very similar to `manual-setup`. Automatic setup for language servers
      and suggestions are disabled. The user can setup default options for
      each server using |lsp-zero.setup_servers()| or |lsp-zero.configure()|.
      In order to initialize the server the user will need to call the
      `.use()` function. See |lsp-zero-lua-api| section for more details
      of these functions.

  system-lsp: ~
      Is the same as `manual-setup`, automatic setup for language servers
      and suggestions are going to be disabled. It is designed to call
      language servers installed "globally" on the system. The user will
      need to call |lsp-zero.configure()| or |lsp-zero.setup_servers()|
      in order to initialize the language servers. See |lsp-zero-lua-api|
      section for more details of these functions.

==============================================================================
Preferences                                             *lsp-zero-preferences*

You can choose the features you want using |lsp-zero.set_preferences()|
function. It takes as argument a "table" describing the options you want to
enable/disable.

These are the available options.

  suggest_lsp_servers: ~
      Enables the suggestions of lsp servers when you enter a filetype
      for the first time.

  setup_servers_on_start: ~
      when set to `true` all installed servers will be initialized on startup.
      When is set to the string `"per-project"` only the servers listed with
      the function |lsp-zero.use()| will be initialized. If the value is
      `false` servers will be initialized when you call |lsp-zero.configure()|
      or |lsp-zero.setup_servers()|.

  set_lsp_keymaps: ~
      Add keybindings to a buffer with a language server attached.
      This bindings will trigger actions like go to definition, go
      to reference, etc.

  configure_diagnostics: ~
      Uses the built-in function |vim.diagnostic.config()| to setup the
      way error messages are shown in the buffer. It also creates keymaps
      to navigate between the location of these errors.

  cmp_capabilities: ~
      Tell the language servers what capabilities `nvim-cmp` supports.

  manage_nvim_cmp: ~
      Use the default setup for `nvim-cmp`. It configures keybindings and
      completion sources for `nvim-cmp`.

  call_servers: ~
      if set to `'local'` it'll try to setup one of the supported installers
      (mason.nvim or nvim-lsp-installer). If set to `'lsp-installer'`
      it will setup nvim-lsp-installer. If set to `mason` it will setup
      mason.nvim. If set to `'global'` it will only try to use language
      servers available globally.

  sign_icons: ~
      Set the icons shown in the "gutter" on the line diagnostics
      messages are located.

The code below describes the same features the `recommended` preset enables.

>
  require('lsp-zero').set_preferences({
    suggest_lsp_servers = true,
    setup_servers_on_start = true,
    set_lsp_keymaps = true,
    configure_diagnostics = true,
    cmp_capabilities = true,
    manage_nvim_cmp = true,
    call_servers = 'local',
    sign_icons = {
      error = '✘',
      warn = '▲',
      hint = '⚑',
      info = ''
    }
  })
<

It is possible to override the preferences of a preset if you use
|lsp-zero.set_preferences()| right after |lsp-zero.preset()|.

For example,  you could disable automatic suggestions for language servers
even if you are using the `recommended` preset.

>
  local lsp = require('lsp-zero')
  lsp.preset('recommended')

  lsp.set_preferences({
    suggest_lsp_servers = false
  })
<

==============================================================================
Autocomplete                                           *lsp-zero-autocomplete*

`lsp-zero` relies on |nvim-cmp| to provide autocompletion.

                                                     *lsp-zero-about-nvim-cmp*

`nvim-cmp` has a concept of "sources", these provide the actual data
displayed in neovim. `lsp-zero` depends on the following sources:

  cmp-buffer: ~
    Provides suggestions based on the current file.
    Url: https://github.com/hrsh7th/cmp-buffer

  cmp-path: ~
    Gives completions based on the filesystem.
    Url: https://github.com/hrsh7th/cmp-path

  cmp_luasnip: ~
    It shows snippets in the suggestions.
    Url: https://github.com/saadparwaiz1/cmp_luasnip

  cmp-nvim-lsp: ~
    Show data send by the language server.
    Url: https://github.com/hrsh7th/cmp-nvim-lsp

  cmp-nvim-lua: ~
      Provides completions based on neovim's lua api.
      Url: https://github.com/hrsh7th/cmp-nvim-lua

                                             *lsp-zero-completion-keybindings*

The default configuration declares the following keybindings.

  <Enter>: ~
      Confirms selection.

  <Up>: ~
      Navigate to previous item on the list.

  <Down>: ~
      Navigate to the next item on the list.

  <Ctrl-u>: ~
      Scroll up in the item's documentation.

  <Ctrl-f>: ~
      Scroll down in the item's documentation.

  <Ctrl-e>: ~
      Toggles the completion.

  <Ctrl-d>: ~
      Go to the next placeholder in the snippet.

  <Ctrl-b>: ~
      Go to the previous placeholder in the snippet.

  <Tab>: ~
      Enables completion when the cursor is inside a word. If the completion
      menu is visible it will navigate to the next item in the list.

  <S-Tab>: ~
      When the completion menu is visible navigate to the previous
      item in the list.

==============================================================================
LSP                                                      *lsp-zero-lsp-config*

When a language server gets attached to a buffer you gain access to some
keybindings and commands. All of these are bound to a built-in function
so you can get more details using the `:help` command.

                                                        *lsp-zero-keybindings*

  K: ~
      Displays hover information about the symbol under the cursor in a
      floating window. See |vim.lsp.buf.hover()|.

  gd: ~
      Jumps to the definition of the symbol under the cursor.
      See |vim.lsp.buf.definition()|.

  gD: ~
      Jumps to the declaration of the symbol under the cursor. Some servers
      don't implement this feature. See |vim.lsp.buf.declaration()|.

  gi: ~
      Lists all the implementations for the symbol under the cursor in the
      quickfix window. See |vim.lsp.buf.implementation()|.

  go: ~
      Jumps to the definition of the type of the symbol under the cursor.
      See |vim.lsp.buf.type_definition()|.

  gr: ~
      Lists all the references to the symbol under the cursor in the quickfix
      window. See |vim.lsp.buf.references()|.

  <Ctrl-k>: ~
      Displays signature information about the symbol under the cursor in a
      floating window. See |vim.lsp.buf.signature_help()|. If a mapping
      already exists for this key this function is not bound.

  <F2>: ~
      Renames all references to the symbol under the cursor.
      See |vim.lsp.buf.rename()|.

  <F4>: ~
      Selects a code action available at the current cursor position.
      See |vim.lsp.buf.code_action()|.

                                             *lsp-zero-diagnostic-keybindings*

  gl: ~
      Show diagnostic in a floating window. See |vim.diagnostic.open_float()|.

  [d: ~
      Move to the previous diagnostic in the current buffer.
      See |vim.diagnostic.goto_prev()|.

  ]d: ~
      Move to the next diagnostic. See |vim.diagnostic.goto_next()|.

                                                    *lsp-zero-buffer-commands*

  LspZeroFormat: ~
      Formats the current buffer or range. If the "bang" is provided
      formatting will be synchronous (ex: `LspZeroFormat!`). See
      |vim.lsp.buf.formatting()|, |vim.lsp.buf.range_formatting()|
      and |vim.lsp.buf.formatting_sync()|.

  LspZeroWorkspaceRemove: ~
      Remove the folder at path from the workspace folders.
      See |vim.lsp.buf.remove_workspace_folder()|.

  LspZeroWorkspaceAdd: ~
      Add the folder at path to the workspace folders.
      See |vim.lsp.buf.add_workspace_folder()|.

  LspZeroWorkspaceList: ~
      List workspace folders. See |vim.lsp.buf.list_workspace_folders()|.

                                                    *lsp-zero-global-commands*

  LspZeroSetupServers: ~
      It takes a space separated list of servers and configures them.
      It calls the function |lsp-zero.setup_servers()| under the hood.
      If the `bang` is provided the root dir of the language server
      will be the same as neovim. Note that this command for when you
      decide to handle the configuration of servers manually, it will
      only do something when `setup_servers_on_start` is disabled.

==============================================================================
Server Installer                                          *lsp-zero-installer*

Install and updates of language servers is done with |mason.nvim|.

To install a server manually use the command `LspInstall` with the name of the
server you want to install. If you don't provide a name the command will try
to suggest a language server based on the filetype of the current buffer.

To check for updates on the language servers use the command `Mason`.
A floating window will open showing you all the packages mason.nvim can
install. You can filter the packages by categories for example, language
servers are in the second category, so if you press the number `2` it'll
show only the language servers. The packages you have installed will appear
at the top. If there is any update available, the item will display a message.
Navigate to that item and press u to install the update.

To uninstall a server use the command Mason. Navigate to the language server
you want to delete and press X.

To know more about the available bindings inside the floating window of
`Mason` press `g?`.

If you need to customize `mason.nvim` make sure you do it before
calling the `lsp-zero` module.

>
  require('mason.settings').set({
    ui = {
      border = 'rounded'
    }
  })

  local lsp = require('lsp-zero')
  lsp.preset('recommended')

  lsp.setup()
<


Migrate from nvim-lsp-installer                   *lsp-zero-installer-migrate*

On July 24 (2022) the author of nvim-lsp-installer announced the development
of that project would stop. He will focus mason.nvim. This new installer has
a bigger scope, it can install LSP servers, formatters, linters, etc.

At the moment `lsp-zero` supports both nvim-lsp-installer and mason.nvim.
Usage of mason.nvim is recommended.

To migrate away from nvim-lsp-installer first remove all servers
installed. Execute.

>
  :LspUninstallAll
<

Optionally, you can reset the state of the server suggestions.

>
  :lua require('lsp-zero.state').reset()
<

Next, remove nvim-lsp-installer from neovim. Use whatever method your plugin
manager has.

Last step is to install mason.nvim and mason-lspconfig:

 - https://github.com/williamboman/mason.nvim
 - https://github.com/williamboman/mason-lspconfig.nvim

==============================================================================
Lua API                                                     *lsp-zero-lua-api*

                                                           *lsp-zero.preset()*

  .preset({name}): ~
      It creates a combination of settings safe to use for specific cases.

      {name} can be one of the following:

          * `recommended`
          * `lsp-compe`
          * `lsp-only`
          * `manual-setup`
          * `per-project`
          * `system-lsp`

      For more details about them see |lsp-zero-presets|.

                                                  *lsp-zero.set_preferences()*

  .set_preferences({opts}): ~
      It gives the user control over the options available in the plugin.
      You are allowed to use it to override the options set by a preset.

      {opts} is table with the properties:

          suggest_lsp_servers: ~
              (boolean) Enables an autocommand that prompts to install a
              language server every time a new filetype is detected
              for the first time.

          setup_servers_on_start: ~
              (boolean | string) If `true` it calls the setup function of
              every language server installed with `mason.nvim`. When
              the value is `false` servers will initialized when you call
              |lsp-zero.configure()| or |lsp-zero.setup_servers()|. When set
              to "per-project", only servers listed with the function
              |lsp-zero.use()| will be initialized.

          set_lsp_keymaps: ~
              (boolean) Decides whether or not the default keymaps
              should be used (see |lsp-zero-keybindings|).

          configure_diagnostics: ~
              (boolean) When enabled it configures the way diagnostics are
              shown in the buffer, and also sets some keybindings
              (see |lsp-zero-diagnostic-keybindings|).

          cmp_capabilities: ~
              (boolean) If enabled it updates the language server capabilities
              to provide LSP based completion inside `nvim-cmp`.

          manage_nvim_cmp: ~
              (boolean) When enabled it configures `nvim-cmp` with a series of
              sources and keybindings.

          sign_icons: ~
              (table) The list of icons to use when showing the location of a
              diagnostic in a line.

              It can have the following properties:

                  * `error`
                  * `warn`
                  * `hint`
                  * `info`

                                                            *lsp-zero.setup()*

  .setup(): ~
      The one that coordinates the call to other setup functions. Handles
      the configuration for `nvim-cmp` and the language servers during
      startup. It is meant to be the last function you call.

                                                    *lsp-zero.setup_servers()*

  .setup_servers({list}): ~
      Used to configure the servers specified in {list}. If you provide the
      `opts` property it will send those options to all language servers.

>
      local lsp_opts = {
        flags = {
          debounce_text_changes = 150,
        }
      }

      lsp.setup_servers({'html', 'cssls', opts = lsp_opts})
<


      If the servers you want to call are installed globally use the option
      `force` to skip any internal check.

>
      lsp.setup_servers({'dartls', 'vls', force = true})
<

                                                        *lsp-zero.configure()*

  .configure({name}, {opts}): ~
      Useful when you need to pass some custom options to a specific
      language server. Takes the same options as `nvim-lspconfig`'s
      setup function. You can find more in |lspconfig-setup|.

>
      lsp.configure('tsserver', {
        flags = {
          debounce_text_changes = 150,
        },
        on_attach = function(client, bufnr)
          print('hello tsserver')
        end
      })
<

    If you have a server installed globally you can use the option
    `force_setup` to skip any internal check.

>
    lsp.configure('dartls', {force_setup = true})
<
                                                        *lsp-zero.on_attach()*

  .on_attach({callback}): ~
      Execute {callback} function every time a server is attached
      to a buffer.

      Let's say you want to disable all the default keybindings and
      you want to declare your own.

>
      local lsp = require('lsp-zero')
      lsp.preset('recommended')

      lsp.set_preferences({
        set_lsp_keymaps = false
      })

      lsp.on_attach(function(client, bufnr)
        local noremap = {buffer = bufnr, remap = false}
        local bind = vim.keymap.set

        bind('n', '<leader>r', '<cmd>lua vim.lsp.buf.rename()<cr>', noremap)
        -- more code  ...
      end)

      lsp.setup()
<

                                                 *lsp-zero.ensure_installed()*

  .ensure_installed({list}): ~
      Installs all the servers in {list} if they are missing.

>
      lsp.ensure_installed({
        'html',
        'cssls',
        'tsserver'
      })
<

                                                   *lsp-zero.nvim_workspace()*

  .nvim_workspace({opts}): ~
      Configures the language server for lua with all the options needed
      to provide completions specific to neovim.

      {opts} supports two properties:

          root_dir: ~
              A function that determines the working directory of
              the language server.

          library: ~
              A list of paths that the server should analyze.

              By default only the runtime files of neovim and
              `vim.stdpath('config')` will be included. To add the path to
              every plugin you'll need to do this.
>
              lsp.nvim_workspace({
                library = vim.api.nvim_get_runtime_file('', true)
              })
<

                                                   *lsp-zero.setup_nvim_cmp()*

  .setup_nvim_cmp({opts}): ~
      {opts} allows you to override some of `nvim-cmp` defaults:

          completion: ~
              Configures the behavior of the completion menu. You can find
              more details about its properities if you start typing the
              command `:help cmp-config.completion`.

          sources: ~
              List of configurations for "data sources".
              See |cmp-config.sources| to know more.

          documentation: ~
              Modifies the look of the documentation window. You can find
              more details about its properities if you start typing the
              command `:help cmp-config.window`.

          formatting: ~
              Modifies the look of the completion menu. You can find more
              details about its properities if you start typing the
              command `:help cmp-config.formatting`.

          preselect: ~
              By default, the first item in the completion menu is preselected.
              Disable this behaviour by setting this to `cmp.PreselectMode.None`.
              See |cmp-config.preselect| to know more.

          mapping: ~
              Sets the keybindings. See |cmp-mapping|.

      Some example config of these options are featured in |cmp-usage|.

                                                              *lsp-zero.use()*

  .use({server}, {opts}): ~
      For when you want full control of the servers you want to use in
      particular project. It is meant to be called in project local config.

      Ideally, you would setup some default values for your servers in your
      neovim configuration using |lsp-zero.setup_servers()|
      or |lsp-zero.configure()|. For example.

>
      -- init.lua

      local lsp = require('lsp-zero')
      lsp.preset('per-project')

      lsp.configure('pyright', {
        flags = {
          debounce_text_changes = 150,
        }
      })

      lsp.setup()
<

      And then in your local config you can add even more options.

>
      -- local config

      local lsp = require('lsp-zero')

      lsp.use('pyright', {
        settings = {
          python = {
            analysis = {
              extraPaths = {'/path/to/my/dependencies'},
            }
          }
        }
      })
<

      Options from |lsp-zero.configure()| will be merged with the ones on
      |lsp-zero.use()| and the server will be initialized.

      |lsp-zero.use()| can also take a list of servers. All the servers on
      the list will share the same options.

>
      -- local config

      local lsp = require('lsp-zero')

      local lsp_opts = {
        flags = {
          debounce_text_changes = 150,
        }
      }

      lsp.use({'html', 'cssls'}, lsp_opts)
<

                                                    *lsp-zero.build_options()*

  .build_options({server}, {opts}): ~
      Returns all the parameters necessary to start a language using
      `nvim-lspconfig`'s setup function. After calling this function
      you'll need to initialize the language server by other means.

      The {opts} table will be merged with the rest of the default
      options for {server}.

      This function was designed as an escape hatch, so you can call
      a language server using other tools.

      For example, if you want to use `rust-tools`, this is how you'll do it.

>
      local lsp = require('lsp-zero')
      lsp.preset('recommended')

      local rust_lsp = lsp.build_options('rust_analyzer', {})

      lsp.setup()

      -- Initialize rust_analyzer with rust-tools
      require('rust-tools').setup({server = rust_lsp})
<

      In case you are using the `recommended` preset (or any preset that
      sets `setup_servers_on_start` to `true`) you need to call
      `.build_options` before calling `.setup()`.

                                             *lsp-zero.defaults.cmp_sources()*

  .defaults.cmp_sources(): ~
      Returns the list of "sources" used in `nvim-cmp`.

                                            *lsp-zero.defaults.cmp_mappings()*

  .defaults.cmp_mappings(): ~
      Returns a table with the default keybindings for `nvim-cmp`. If you
      provide the `{opts}` table it'll merge it with the defaults, this
      way you can extend or change the values easily.

>
      local lsp = require('lsp-zero')
      lsp.preset('recommended')

      local cmp = require('cmp')
      local cmp_select = {behavior = cmp.SelectBehavior.Select}

      lsp.setup_nvim_cmp({
        mapping = lsp.defaults.cmp_mappings({
          ['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
          ['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
        })
      })

      lsp.setup()
<

                                              *lsp-zero.defaults.cmp_config()*

  .defaults.cmp_config(): ~
      Returns the entire configuration table for `nvim-cmp`. If you provide
      the `{opts}` table it'll merge it with the defaults, this way you can
      extend or change the values easily.

>
      local lsp = require('lsp-zero')
      lsp.preset('lsp-compe')

      lsp.setup()

      local cmp = require('cmp')
      local cmp_config = lsp.defaults.cmp_config({
        window = {
          completion = cmp.config.window.bordered()
        }
      })

      cmp.setup(cmp_config)
<

                                          *lsp-zero.defaults.nvim_workspace()*

  .defaults.nvim_workspace(): ~
      Returns the neovim specific settings for `sumneko_lua` language server.

==============================================================================
Support                                                    *lsp-zero-donation*

If you find this tool useful and want to support my efforts, consider
leaving a tip in https://www.buymeacoffee.com/vonheikemen

